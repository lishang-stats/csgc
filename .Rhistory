renv::init()
?gen_adj_sbm
?csgc
devtools::document()
devtools::document()
?csgc
?gen_adj_sbm
file.create("R/gen_adj_dcsbm.R")
devtools::document()
?gen_adj_dcsbm
devtools::document()
?sbm
?gen_adj_sbm
renv::init()
trace(matrix(1,2,3,4),2,2)
trace(matrix(1,2,3,4),2,2))
trace(matrix(c(1,2,3,4),2,2))
renv::snapshot()
file.create
file.create("R/sbm_mle.R")
devtools::document()
?sbm_mle
usethis::use_package(package = "renv", type="Imports")
file.create("R/dcsbm_mle.R")
?gen_adj_dcsbm
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?dcsbm_mle
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
?devtools
?dcsbm_mle
library(csgc)
k = 4
n = 200
prob = c(0.8, 0.1)
K = matrix(prob[2],k,k)
diag(K) = prob[1]
Theta = runif(n,0.8,1)
z = rep(1:k,each=n/k)
A = gen_adj_dcsbm(K,z)$A
dcsbm_mle(A,z)
gen_adj_dcsbm
devtools::document()
library(csgc)
k = 4
n = 200
prob = c(0.8, 0.1)
K = matrix(prob[2],k,k)
diag(K) = prob[1]
Theta = runif(n,0.8,1)
z = rep(1:k,each=n/k)
A = gen_adj_dcsbm(K,z)$A
dcsbm_mle(A,z)
library(csgc)
k = 4
n = 200
prob = c(0.8, 0.1)
K = matrix(prob[2],k,k)
diag(K) = prob[1]
Theta = runif(n,0.8,1)
z = rep(1:k,each=n/k)
A = gen_adj_dcsbm(K,Theta,z)$A
dcsbm_mle(A,z)
devtools::build()
install.packages("D:/NUS/Adrian_Roellin/Project2/csgc_0.0.0.9000.tar.gz", repos = NULL, type = "source")
file.create("R/wasserstein_uniform.R")
devtools::document()
renv::init()
devtools::document()
file.create
file.create("R/ccr.R")
?wasserstein_uniform
sample(1:5,100,T)
devtools::document()
?ccr
file.create("R/csgc_greedy.R")
?csgc
?ccr
devtools::document()
?csgc_greedy
devtools::document()
?csgc_greedy
usethis::use_mit_license()
usethis::use_description()
statistical analysis of network data based on centred subgraph counts
library(csgc)
## basic example code
library(csgc)
## basic example code
library(csgc)
?ccr
label_true = sample(1:5,100,T)
label_est = sample(1:5,100,T)
ccr(label_true,label_est)
k = 4
n = 100
prob = c(0.8, 0.1)
K = matrix(prob[2],k,k)
diag(K) = prob[1]
z = rep(1:k,each=n/k)
mat = gen_adj_sbm(K,z)
A = mat$A
P = mat$P
csgc(A,P,"binomial")
renv::build()
library(renv)
renv::build()
devtools::build()
renv::update()
renv::init()
file.edit("R/csgc_greedy.R")
devtools::documnet()
devtools::document()
usethis::use_package()
usethis::use_package("foreach","doParallel")
usethis::use_package("foreach","imports")
usethis::use_package("doParallel'","imports")
usethis::use_package("doParallel","imports")
usethis::use_package("iterpc","imports")
usethis::use_package("purrr","imports")
usethis::use_package("rootSolve","imports")
usethis::use_package("zoo","imports")
?csgc_greedy
library(csgc)
library(randnet)
k = 2
n = 100
K = matrix(c(0.8, 0.5, 0.5, 0.1), k, k)
z = rep(1:k,each=n/k)
A = gen_adj_sbm(K,z)$A
z0 = reg.SP(A,k)$cluster
csgc_greedy(A,z0,parallel=T)
devtools::document()
?csgc_greedy
usethis::use_package("randnet","imports")
?dcsbm_mle
devtools::document()
devtools::document()
devtools::document()
file.edit("R/wasserstein_uniform.R")
devtools::document()
devtools::document()
