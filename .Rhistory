renv::init()
file.access("R/")
file.access("R/.R")
file.access("R/gen_adj_sbm.R")
file.edit("R/gen_adj_sbm.R")
devtools::document()
set.seed(123)
library(csgc)
k = 4
n = 100
K = matrix(c(0.8, 0.5, 0.1, 0.1,
0.5, 0.1, 0.1, 0.1,
0.1, 0.1, 0.8, 0.5,
0.1, 0.1, 0.5, 0.1),4,4)
z = rep(1:k,each=n/k)
mat = gen_adj_sbm(K,z)
A = mat$A
P = mat$P
renv::restore()
renv::init()
renv::init()
?ccr
??ccr
file.edit("R/ccr.R")
library(csgc)
label_true = sample(1:5,100,T);label_est = sample(1:5,100,T);ccr(label_true,label_est)
file.edit("R/csgc_greedy.R")
library(csgc)
file.edit("R/dcsbm_mle.R")
library(csgc)
file.edit("R/gen_adj_dcsbm.R")
library(csgc)
file.edit("R/sbm_mle.R")
library(csgc)
file.edit("R/spectral_sbm.R")
file.edit("R/spectral_dcsbm.R")
library(csgc)
file.edit("R/wasserstein_uniform.R")
library(csgc)
set.seed(123)
library(csgc)
k = 4
n = 100
K = matrix(c(0.8, 0.5, 0.1, 0.1,
0.5, 0.1, 0.1, 0.1,
0.1, 0.1, 0.8, 0.5,
0.1, 0.1, 0.5, 0.1),4,4)
z = rep(1:k,each=n/k)
mat = gen_adj_sbm(K,z)
A = mat$A
P = mat$P
mat2 = sbm_mle(A,z)
Khat = mat2$K
Phat = mat2$P
zhat = spectral_sbm(A,4)
ccrate = ccr(z,zhat)
ccrate
file.edit("R/csgc.R")
library(csgc)
R CMD INSTALL --build
renv::init
renv::init()
devtools::build()
devtools::build()
devtools::build(binary=TRUE)
renv::init()
file.edit("R/csgc_greedy.R")
library(csgc)
?csgc_greedy
devtools:document()
devtools::document()
?csgc_greedy
file.edit("R/csgc_greedy.R")
library(csgc)
devtools::document()
devtool::build()
devtools::build()
file.edit("R/spectral_sbm.R")
library(csgc)
devtools::document()
library(csgc)
devtools::document()
library(csgc)
devtools::document()
install.packages("Rdpack")
devtools::document()
?spectral_sbm
#' @examples
#' library(csgc)
#' k = 4
#' n = 200
#' prob = c(0.8, 0.1)
#' K = matrix(prob[2],k,k)
#' diag(K) = prob[1]
#' z = rep(1:k,each=n/k)
#' A = gen_adj_sbm(K,z)$A
#' spectral_sbm(A,k)
spectral_sbm <- function(A,k){
# required package: irlba, stats
# INPUT
# A = adjacency matrix
# k = number of communities
#
# OUTPUT
# labels: estimated labels
V = irlba(A+mean(colSums(A)/nrow(A)),k)$v
labels = kmeans(V,k)$cluster
return(labels)
}
devtools::document()
devtools::document()
library(csgc)
devtools::document()
rm(list = c("spectral_sbm"))
devtools::document()
?spectral_sbm
devtools::document()
?spectral_sbm
library(csgc)
devtools::document()
?spectral_sbm
devtools::document()
library(csgc)
?spectral_sbm
devtools::document()
?spectral_sbm
devtools::document()
library(csgc)
?spectral_sbm
devtools::document()
library(csgc)
?spectral_sbm
library(csgc)
devtools::document()
?spectral_sbm
library(csgc)
devtools::document()
library(csgc)
devtools::document()
?spectral_sbm
file.edit("R/spectral_dcsbm.R")
devtools::document()
library(csgc)
?spectral_dcsbm
file.edit("R/spectral_sbm.R")
library(csgc)
file.edit("R/csgc_greedy.R")
library(csgc)
devtools::document()
?csgc_greedy
devtools::build()
file.edit("R/spectral_dcsbm.R")
library(csgc)
devtools::document()
devtools::build()
file.edit("R/dcsbm_mle.R")
library(csgc)
devtools::document()
devtools::build()
file.edit("R/sbm_mle.R")
library(csgc)
devtools::build()
file.edit("R/spectral_sbm.R")
library(csgc)
devtools::document()
file.edit("R/spectral_dcsbm.R")
library(csgc)
devtools::document()
devtools::build()
file.edit("R/dcsbm_mle.R")
library(csgc)
library(csgc)
devtools::document()
file.edit("R/gen_adj_dcsbm.R")
library(csgc)
devtools::document()
devtools::build()
install.packages("D:/NUS/Adrian_Roellin/Project2/csgc_package/csgc_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(csgc)
?spectral_sbm
file.edit("R/spectral_dcsbm.R")
devtools::document()
?spectral_dcsbm
devtools::document()
renv::init()
file.edit("R/spectral_dcsbm.R")
library(csgc)
file.create("R/A_P_from_ergm.R")
file.edit("R/A_P_from_ergm.R")
library(csgc)
data("sampson")
library(ergm)
renv::init()
file.edit("R/A_P_from_ergm.R")
library(csgc)
devtools::document()
data("sampson")
library(ergm)
renv::init()
file.edit("R/A_P_from_ergm.R")
usethis::use_package("devtools")
usethis::use_package("ergm")
library(csgc)
data("sampson")
library(ergm)
data("sampson")
fit <- ergm(samplike ~ edges + cycle(4,semi=TRUE))
A_P_from_ergm(model=fit)
out = A_P_from_ergm(model=fit)
out$A
out$P
library(csgc)
devtools::document()
?A_P_from_ergm
file.create("R/A_P_from_igraph.R")
file.edit("R/A_P_from_igraph.R")
usethis::use_package("igraph")
library(csgc)
library(igraph)
num = 1000
pm = matrix(c(.5, .1, .1, .5), 2, 2)
bs = c(300, 700)
g = sample_sbm(num, pm, bs)
out = A_P_from_igraph(graph = g)
out$A
out$P
devtools::document()
library(csgc)
library(igraph)
num = 1000
pm = matrix(c(.5, .1, .1, .5), 2, 2)
bs = c(300, 700)
g = sample_sbm(num, pm, bs)
out = A_P_from_igraph(graph = g)
out$A
out$P
?A_P_from_igraph
file.create("R/A_P_from_fastRG.R")
file.edit("R/A_P_from_fastRG.R")
usethis::use_package("fastRG")
library(csgc)
devtools::document()
library(csgc)
library(fastRG)
set.seed(27)
k <- 5
n <- 100
B <- matrix(stats::runif(k * k), nrow = k, ncol = k)
theta <- round(stats::rlnorm(n, 2))
pi <- c(1, 2, 4, 1, 1)
m1 <- dcsbm(theta = theta, B = B, pi = pi, expected_degree = 50)
out = A_P_from_fastRG(model = m1)
#' @examples
#' library(fastRG)
#' set.seed(27)
#' k <- 5
#' n <- 100
#' B <- matrix(stats::runif(k * k), nrow = k, ncol = k)
#' theta <- round(stats::rlnorm(n, 2))
#' pi <- c(1, 2, 4, 1, 1)
#' m1 <- dcsbm(theta = theta, B = B, pi = pi, expected_degree = 50)
#' out = A_P_from_fastRG(model = m1)
A_P_from_fastRG <- function(model){
if (length(grep("_dcsbm", attr(model,"class")))>0){
A = as.matrix(sample_sparse(model))
diag(A) = 0
A[A>1] = 1
z = as.numeric(model$z)
P = if (length(grep("_sbm", attr(model,"class")))>0) sbm_mle(A,z)$P else dcsbm_mle(A,z)$P
modeltype = if (m1$poisson_edges==TRUE) "poisson" else "binomial"
} else{
stop("The model does not belong to SBM/DCSBM, cannot calculate csgc statistics!")
}
return(list(A=A,P=P,modeltype=modeltype))
}
out$A
out$P
out$modeltype
devtools::document()
rm(list = c("A_P_from_fastRG"))`
;
m,j
))
''
``
rm(list = c("A_P_from_fastRG"))
set.seed(27)
k <- 5
n <- 100
B <- matrix(stats::runif(k * k), nrow = k, ncol = k)
theta <- round(stats::rlnorm(n, 2))
pi <- c(1, 2, 4, 1, 1)
m1 <- fastRG::dcsbm(theta = theta, B = B, pi = pi, expected_degree = 50)
out = A_P_from_fastRG(model = m1)
out$A
out$P
out$modeltype
library(csgc)
file.edit("A_P_from_igraph.R")
file.edit("R/A_P_from_igraph.R")
library(csgc)
library(csgc)
detach("package:igraph", unload=TRUE)
remove.packages("igraph")
usethis::use_package("fastRG")
library(csgc)
devtools::document()
library(fastRG)
set.seed(27)
k <- 5
n <- 100
B <- matrix(stats::runif(k * k), nrow = k, ncol = k)
theta <- round(stats::rlnorm(n, 2))
pi <- c(1, 2, 4, 1, 1)
m1 <- dcsbm(theta = theta, B = B, pi = pi, expected_degree = 50)
out = A_P_from_fastRG(model = m1)
out$A
renv::init()
file.edit("R/A_P_from_fastRG.R")
file.edit("R/A_P_from_igraph.R")
library(csgc)
renv::init()
file.edit
file.edit("R/A_P_from_fastRG.R")
library(csgc)
library(csgc)
file.edit("R/A_P_from_igraph.R")
library(csgc)
num = 1000
pm = matrix(c(.5, .1, .1, .5), 2, 2)
bs = c(300, 700)
g = igraph::sample_sbm(num, pm, bs)
out = A_P_from_igraph(graph = g)
out$A
out$P
usethis::use_package("igraph")
usethis::use_package("fastRG")
renv::init()
file.edit("R/A_P_from_fastRG.R")
library(csgc)
set.seed(27)
k <- 5
n <- 100
B <- matrix(stats::runif(k * k), nrow = k, ncol = k)
theta <- round(stats::rlnorm(n, 2))
pi <- c(1, 2, 4, 1, 1)
m1 <- fastRG::dcsbm(theta = theta, B = B, pi = pi, expected_degree = 50)
out = A_P_from_fastRG(model = m1)
out$A
out$P
out$modeltype
devtools::document()
file.edit("man/A_P_from_igraph.R")
file.edit("R/A_P_from_igraph.R")
library(csgc)
devtools::document()
?A_P_from_igraph
file.edit("R/A_P_from_ergm.R")
renv::init()
library(csgc)
library(csgc)
data("sampson")
fit <- ergm::ergm(samplike ~ edges + cycle(4,semi=TRUE))
out = A_P_from_ergm(model=fit)
out$A
out$P
library(csgc)
usethis::use_package("ergm")
renv::init()
file.edit("R/A_P_from_ergm.R")
renv::init()
file.edit("R/A_P_from_ergm.R")
??get.network.attribute
renv::init()
file.edit("R/A_P_from_ergm.R")
library(csgc)
data("sampson")
ergm::data("sampson")
library(ergm)
data("sampson")
fit <- ergm::ergm(samplike ~ edges + cycle(4,semi=TRUE))
out = A_P_from_ergm(model=fit)
out$A
out$P
library(csgc)
renv::init()
file.edit("R/A_P_from_ergm.R")
library(csgc)
library(ergm)
data("sampson")
fit <- ergm(samplike ~ edges + cycle(4,semi=TRUE))
out = A_P_from_ergm(model=fit)
out$A
out$P
devtools::document()
?A_P_from_ergm
num = 100
pm = matrix(c(.5, .1, .1, .5), 2, 2)
bs = c(30, 70)
g = igraph::sample_sbm(num, pm, bs)
out = A_P_from_igraph(graph = g)
library(csgc)
out = A_P_from_igraph(graph = g)
csgc(out$A, out$P)$t
set.seed(27)
k <- 5
n <- 100
B <- matrix(stats::runif(k * k), nrow = k, ncol = k)
theta <- round(stats::rlnorm(n, 2))
pi <- c(1, 2, 4, 1, 1)
m1 <- fastRG::dcsbm(theta = theta, B = B, pi = pi, expected_degree = 50)
out = A_P_from_fastRG(model = m1)
csgc(out$A, out$P, out$modeltype)$t
library(ergm)
library(csgc)
data("sampson")
fit <- ergm(samplike ~ edges)
A_P_from_ergm(fit)
out = A_P_from_ergm(fit)
csgc(out$A, out$P)$t
data("sampson")
fit <- ergm(samplike ~ edges + triangle)
fit <- ergm(samplike ~ edges + cycle(3,semi=TRUE))
out = A_P_from_ergm(fit)
csgc(out$A, out$P)$t
file.remove("R/A_P_from_fastRG.R")
file.remove("R/A_P_from_igraph.R.R")
file.remove("R/A_P_from_igraph.R")
renv::init()
file.edit("R/csgc.R")
library(csgc)
devtools::document()
file.edit("R/A_P_from_ergm.R")
devtools::document()
library(ergm)
data(ecoli)
data(florentine)
as.matrix(flobusiness)
as.matrix(flomarriage)
data(samplk)
dim(as.matrix(samplk1))
dim(as.matrix(samplk2))
dim(as.matrix(samplk3))
data(faux.dixon.high)
dixon.fit <- ergm(original.net ~ edges + mutual +
absdiff("grade") + nodefactor("race", base=5) + nodefactor("grade", base=3)
+ nodefactor("sex") + nodematch("race", diff = TRUE) + nodematch("grade",
diff = TRUE) + nodematch("sex", diff = FALSE) + idegree(0:1) + odegree(0:1)
+ gwesp(0.1,fixed=T), constraints = ~bd(maxout=10), control =
control.ergm(MCMLE.steplength = .25, MCMC.burnin = 100000, MCMC.interval =
10000, MCMC.samplesize = 2500, MCMLE.maxit = 100), verbose=T)
dixon.fit <- ergm(faux.dixon.high ~ edges + mutual +
absdiff("grade") + nodefactor("race", base=5) + nodefactor("grade", base=3)
+ nodefactor("sex") + nodematch("race", diff = TRUE) + nodematch("grade",
diff = TRUE) + nodematch("sex", diff = FALSE) + idegree(0:1) + odegree(0:1)
+ gwesp(0.1,fixed=T), constraints = ~bd(maxout=10), control =
control.ergm(MCMLE.steplength = .25, MCMC.burnin = 100000, MCMC.interval =
10000, MCMC.samplesize = 2500, MCMLE.maxit = 100), verbose=T)
dixon.fit <- ergm(faux.dixon.high ~ edges + mutual +
absdiff("grade") + nodefactor("race", base=5) + nodefactor("grade", base=3)
+ nodefactor("sex") + nodematch("race", diff = TRUE) + nodematch("grade",
diff = TRUE))
dixon.fit <- ergm(faux.dixon.high ~ edges + mutual)
out = A_P_from_ergm(model=dixon.fit)
dixon.fit$formula
dixon.fit$formula[[2]]
get.network.attribute(dixon.fit$formula[[2]],"hyper")
get.network.attribute(get(dixon.fit$formula[[2]]),"hyper")
data = get(dixon.fit$formula[[2]])
library(csgc)
library(csgc)
library(ergm)
data(faux.dixon.high)
fit <- ergm(faux.dixon.high ~ edges + mutual)
out = A_P_from_ergm(model=fit)
out$A
csgc(out$A, out$P)$t
sum(out$A)
library(ergm)
data(faux.dixon.high)
fit <- ergm(faux.dixon.high ~ edges)
out = A_P_from_ergm(model=fit)
csgc(out$A, out$P)$t
fit <- ergm(faux.dixon.high ~ edges + triangle)
fit <- ergm(faux.dixon.high ~ edges + cycle(4))
fit <- ergm(faux.dixon.high ~ edges + cycle(4, mutual))
fit <- ergm(faux.dixon.high ~ edges + cycle(4, semi=TRUE))
fit <- ergm(faux.dixon.high ~ edges + cycle(3, semi=TRUE))
dim(A)
dim(data)
library(csgc)
devtools::document()
file.create("R/A_P_from_blockmodels.R")
?A_P_from_ergm
npc <- 30 # nodes per class
Q <- 3 # classes
n <- npc * Q # nodes
Z<-diag(Q)%x%matrix(1,npc,1)
P<-matrix(runif(Q*Q),Q,Q)
M<-1*(matrix(runif(n*n),n,n)<Z%*%P%*%t(Z)) ## adjacency matrix
fit <- BM_bernoulli("SBM",M )
library(blockmodels)
renv::init()
file.edit("R/A_P_from_blockmodels.R")
?A_P_from_ergm
??A_P_from_ergm
library(csgc)
devtools::document()
file.edit("R/A_P_from_ergm.R")
devtools::document()
?A_P_from_ergm
?A_P_from_blockmodels
