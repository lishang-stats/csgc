renv::init()
?gen_adj_sbm
?csgc
devtools::document()
devtools::document()
?csgc
?gen_adj_sbm
file.create("R/gen_adj_dcsbm.R")
devtools::document()
?gen_adj_dcsbm
devtools::document()
?sbm
?gen_adj_sbm
renv::init()
trace(matrix(1,2,3,4),2,2)
trace(matrix(1,2,3,4),2,2))
trace(matrix(c(1,2,3,4),2,2))
renv::snapshot()
file.create
file.create("R/sbm_mle.R")
devtools::document()
?sbm_mle
usethis::use_package(package = "renv", type="Imports")
file.create("R/dcsbm_mle.R")
?gen_adj_dcsbm
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?dcsbm_mle
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
?devtools
?dcsbm_mle
library(csgc)
k = 4
n = 200
prob = c(0.8, 0.1)
K = matrix(prob[2],k,k)
diag(K) = prob[1]
Theta = runif(n,0.8,1)
z = rep(1:k,each=n/k)
A = gen_adj_dcsbm(K,z)$A
dcsbm_mle(A,z)
gen_adj_dcsbm
devtools::document()
library(csgc)
k = 4
n = 200
prob = c(0.8, 0.1)
K = matrix(prob[2],k,k)
diag(K) = prob[1]
Theta = runif(n,0.8,1)
z = rep(1:k,each=n/k)
A = gen_adj_dcsbm(K,z)$A
dcsbm_mle(A,z)
library(csgc)
k = 4
n = 200
prob = c(0.8, 0.1)
K = matrix(prob[2],k,k)
diag(K) = prob[1]
Theta = runif(n,0.8,1)
z = rep(1:k,each=n/k)
A = gen_adj_dcsbm(K,Theta,z)$A
dcsbm_mle(A,z)
devtools::build()
install.packages("D:/NUS/Adrian_Roellin/Project2/csgc_0.0.0.9000.tar.gz", repos = NULL, type = "source")
file.create("R/wasserstein_uniform.R")
devtools::document()
renv::init()
devtools::document()
file.create
file.create("R/ccr.R")
?wasserstein_uniform
sample(1:5,100,T)
devtools::document()
?ccr
file.create("R/csgc_greedy.R")
?csgc
?ccr
devtools::document()
?csgc_greedy
devtools::document()
?csgc_greedy
usethis::use_mit_license()
usethis::use_description()
statistical analysis of network data based on centred subgraph counts
library(csgc)
## basic example code
library(csgc)
## basic example code
library(csgc)
?ccr
label_true = sample(1:5,100,T)
label_est = sample(1:5,100,T)
ccr(label_true,label_est)
k = 4
n = 100
prob = c(0.8, 0.1)
K = matrix(prob[2],k,k)
diag(K) = prob[1]
z = rep(1:k,each=n/k)
mat = gen_adj_sbm(K,z)
A = mat$A
P = mat$P
csgc(A,P,"binomial")
renv::build()
library(renv)
renv::build()
devtools::build()
renv::update()
renv::init()
file.edit("R/csgc_greedy.R")
devtools::documnet()
devtools::document()
usethis::use_package()
usethis::use_package("foreach","doParallel")
usethis::use_package("foreach","imports")
usethis::use_package("doParallel'","imports")
usethis::use_package("doParallel","imports")
usethis::use_package("iterpc","imports")
usethis::use_package("purrr","imports")
usethis::use_package("rootSolve","imports")
usethis::use_package("zoo","imports")
?csgc_greedy
library(csgc)
library(randnet)
k = 2
n = 100
K = matrix(c(0.8, 0.5, 0.5, 0.1), k, k)
z = rep(1:k,each=n/k)
A = gen_adj_sbm(K,z)$A
z0 = reg.SP(A,k)$cluster
csgc_greedy(A,z0,parallel=T)
devtools::document()
?csgc_greedy
usethis::use_package("randnet","imports")
?dcsbm_mle
devtools::document()
devtools::document()
devtools::document()
file.edit("R/wasserstein_uniform.R")
devtools::document()
devtools::document()
file.create("R/spectral_sbm.R")
renv::init()
?gen_adj_sbm
devtools::document()
?spectral_sbm
file.create("R/spectral_dcsbm.R")
devtools::document()
usethis::use_package("irlba")
usethis::use_package("stats")
?spectral_dcsbm
devtools::build()
renv::init()
usethis::use_package("parallel")
file.edit("R/ccr.R")
devtools::document()
file.edit("R/csgc_greedy.R")
devtools::document()
devtools::build()
renv::init()
file.edit("R/csgc_greedy.R")
devtools::document()
devtools::build()
renv::init()
file.edit("R/ccr.R")
devtools::document()
file.edit("R/spectral_sbm.R")
devtools::document()
file.edit("R/spectral_dcsbm.R")
devtools::document()
?ccr
label_true = sample(1:5,100,T)
label_est = sample(1:5,100,T)
ccr(label_true,label_est)
ccr(label_true,label_est,T)
renv::init()
file.edit("R/csgc_greedy.R")
devtools::document()
renv::init()
renv::init()
runif(10)
K=matrix(0,4,4)
set.seed(123)
library(csgc)
K = matrix(0,4,4)
K[upper.tri(K)] = runif(10)
## basic example code
K[upper.tri(K,diag=T)] = runif(10)
set.seed(123)
library(csgc)
K = matrix(0,4,4)
K[upper.tri(K,diag=T)] = runif(10)
## basic example code
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
set.seed(123)
library(csgc)
K = matrix(0,4,4)
K[upper.tri(K,diag=T)] = runif(10)
## basic example code
set.seed(123)
library(csgc)
K = matrix(0,4,4)
K[upper.tri(K,diag=T)] = runif(10)
## basic example code
K
set.seed(123)
library(csgc)
K = matrix(0,4,4)
K[upper.tri(K,diag=T)] = runif(10)
K
K=K+t(K)
K
## basic example code
set.seed(123)
library(csgc)
K = matrix(0,4,4)
K[upper.tri(K,diag=T)] = runif(10)
K
K[lower.tri(K,diag=T)] = t(K)[lower.tri(K,diag=T)]
K
## basic example code
set.seed(123)
library(csgc)
k = 4
n = 200
K = matrix(0,k,k)
K[upper.tri(K,diag=T)] = runif(k*(k+1)/2)
K[lower.tri(K,diag=T)] = t(K)[lower.tri(K,diag=T)]
z = rep(1:k,each=n/k)
A,P = gen_adj_sbm(K,z)
renv::init()
set.seed(123)
library(csgc)
k = 4
n = 200
K = matrix(0,k,k)
K[upper.tri(K,diag=T)] = runif(k*(k+1)/2)
K[lower.tri(K,diag=T)] = t(K)[lower.tri(K,diag=T)]
z = rep(1:k,each=n/k)
mat = gen_adj_sbm(K,z)
library(csgc)
file.edit("R/gen_adj_sbm.R")
devtools::document()
?gen_adj_sbm
set.seed(123)
library(csgc)
k = 4
n = 200
K = matrix(0,k,k)
K[upper.tri(K,diag=T)] = runif(k*(k+1)/2)
K[lower.tri(K,diag=T)] = t(K)[lower.tri(K,diag=T)]
z = rep(1:k,each=n/k)
mat = gen_adj_sbm(K,z)
A = mat$A
P = mat$P
## basic example code
?csgc
?csgc::clusterApply()
?clusterApply
?sbm_mle
mat2 = sbm_mle(A,z)
Khat = mat2$K
Phat = mat2$P
zhat = spectral_sbm(A,4)
ccrate = ccr(z,zhat)
ccrate
t = csgc(A,P,"binomial")$t
t
set.seed(123)
library(csgc)
k = 4
n = 200
K = matrix(c(0.8, 0.5, 0.1, 0.1,
0.5, 0.1, 0.1, 0.1,
0.1, 0.1, 0.8, 0.5,
0.1, 0.1, 0.5, 0.1),4,4)
z = rep(1:k,each=n/k)
mat = gen_adj_sbm(K,z)
A = mat$A
P = mat$P
t = csgc(A,P,"binomial")$t
t
Phat2 = sbm_mle(A,zhat)$P
t = csgc(A,Phat2,"binomial")$t
t
out = csgc_greedy(A,zhat)
out = csgc_greedy(A,zhat,parallel=T)
set.seed(123)
library(csgc)
k = 4
n = 100
K = matrix(c(0.8, 0.5, 0.1, 0.1,
0.5, 0.1, 0.1, 0.1,
0.1, 0.1, 0.8, 0.5,
0.1, 0.1, 0.5, 0.1),4,4)
z = rep(1:k,each=n/k)
mat = gen_adj_sbm(K,z)
A = mat$A
P = mat$P
devtools::document()
renv::init()
file.access("R/")
file.access("R/.R")
file.access("R/gen_adj_sbm.R")
file.edit("R/gen_adj_sbm.R")
devtools::document()
set.seed(123)
library(csgc)
k = 4
n = 100
K = matrix(c(0.8, 0.5, 0.1, 0.1,
0.5, 0.1, 0.1, 0.1,
0.1, 0.1, 0.8, 0.5,
0.1, 0.1, 0.5, 0.1),4,4)
z = rep(1:k,each=n/k)
mat = gen_adj_sbm(K,z)
A = mat$A
P = mat$P
renv::restore()
renv::init()
renv::init()
?ccr
??ccr
file.edit("R/ccr.R")
library(csgc)
label_true = sample(1:5,100,T);label_est = sample(1:5,100,T);ccr(label_true,label_est)
file.edit("R/csgc_greedy.R")
library(csgc)
file.edit("R/dcsbm_mle.R")
library(csgc)
file.edit("R/gen_adj_dcsbm.R")
library(csgc)
file.edit("R/sbm_mle.R")
library(csgc)
file.edit("R/spectral_sbm.R")
file.edit("R/spectral_dcsbm.R")
library(csgc)
file.edit("R/wasserstein_uniform.R")
library(csgc)
set.seed(123)
library(csgc)
k = 4
n = 100
K = matrix(c(0.8, 0.5, 0.1, 0.1,
0.5, 0.1, 0.1, 0.1,
0.1, 0.1, 0.8, 0.5,
0.1, 0.1, 0.5, 0.1),4,4)
z = rep(1:k,each=n/k)
mat = gen_adj_sbm(K,z)
A = mat$A
P = mat$P
mat2 = sbm_mle(A,z)
Khat = mat2$K
Phat = mat2$P
zhat = spectral_sbm(A,4)
ccrate = ccr(z,zhat)
ccrate
file.edit("R/csgc.R")
library(csgc)
R CMD INSTALL --build
renv::init
renv::init()
devtools::build()
devtools::build()
devtools::build(binary=TRUE)
renv::init()
file.edit("R/csgc_greedy.R")
library(csgc)
?csgc_greedy
devtools:document()
devtools::document()
?csgc_greedy
file.edit("R/csgc_greedy.R")
library(csgc)
devtools::document()
devtool::build()
devtools::build()
file.edit("R/spectral_sbm.R")
library(csgc)
devtools::document()
library(csgc)
devtools::document()
library(csgc)
devtools::document()
install.packages("Rdpack")
devtools::document()
?spectral_sbm
#' @examples
#' library(csgc)
#' k = 4
#' n = 200
#' prob = c(0.8, 0.1)
#' K = matrix(prob[2],k,k)
#' diag(K) = prob[1]
#' z = rep(1:k,each=n/k)
#' A = gen_adj_sbm(K,z)$A
#' spectral_sbm(A,k)
spectral_sbm <- function(A,k){
# required package: irlba, stats
# INPUT
# A = adjacency matrix
# k = number of communities
#
# OUTPUT
# labels: estimated labels
V = irlba(A+mean(colSums(A)/nrow(A)),k)$v
labels = kmeans(V,k)$cluster
return(labels)
}
devtools::document()
devtools::document()
library(csgc)
devtools::document()
rm(list = c("spectral_sbm"))
devtools::document()
?spectral_sbm
devtools::document()
?spectral_sbm
library(csgc)
devtools::document()
?spectral_sbm
devtools::document()
library(csgc)
?spectral_sbm
devtools::document()
?spectral_sbm
devtools::document()
library(csgc)
?spectral_sbm
devtools::document()
library(csgc)
?spectral_sbm
library(csgc)
devtools::document()
?spectral_sbm
library(csgc)
devtools::document()
library(csgc)
devtools::document()
?spectral_sbm
file.edit("R/spectral_dcsbm.R")
devtools::document()
library(csgc)
?spectral_dcsbm
file.edit("R/spectral_sbm.R")
library(csgc)
file.edit("R/csgc_greedy.R")
library(csgc)
devtools::document()
?csgc_greedy
devtools::build()
file.edit("R/spectral_dcsbm.R")
library(csgc)
devtools::document()
devtools::build()
file.edit("R/dcsbm_mle.R")
library(csgc)
devtools::document()
devtools::build()
file.edit("R/sbm_mle.R")
library(csgc)
devtools::build()
file.edit("R/spectral_sbm.R")
library(csgc)
devtools::document()
file.edit("R/spectral_dcsbm.R")
library(csgc)
devtools::document()
devtools::build()
file.edit("R/dcsbm_mle.R")
library(csgc)
library(csgc)
devtools::document()
file.edit("R/gen_adj_dcsbm.R")
library(csgc)
devtools::document()
